// **-- Begin GLSL Section --**

vertex_program DepthShadowmap/ReceiverVP_GLSL glsl
{
    source DepthShadowmapReceiverVp.glsl

    default_params
    {
        param_named_auto world world_matrix
        param_named_auto worldIT inverse_transpose_world_matrix
        param_named_auto worldViewProj worldviewproj_matrix
	param_named_auto texViewProj texture_viewproj_matrix
        param_named_auto lightPosition light_position 0
    }
}


fragment_program DepthShadowmap/ReceiverFP_GLSL glsl
{
    source DepthShadowmapReceiverFp.glsl

    preprocessor_defines PCF=0

    default_params
    {
	param_named shadowMap int 0

        // 1/1024
        // param_named inverseShadowmapSize float 0.0009765625 

        // 1/2048
        param_named inverseShadowmapSize float 0.000488281 // 1/2048 

        // 1/4096
        // param_named inverseShadowmapSize float 0.000244141 

	param_named fixedDepthBias float 0 
	param_named gradientClamp float 0.0098
	param_named gradientScaleBias float 0
        param_named outColor float4 1 0 0 1

        param_named_auto lightPositionLocal light_position_object_space 0
        param_named_auto eyePosition camera_position_object_space
        param_named_auto lightDiffuse light_diffuse_colour 0
        param_named_auto lightSpecular light_specular_colour 0

        param_named_auto mvp     worldviewproj_matrix
        param_named_auto inv_mvp inverse_worldviewproj_matrix
        
        //VERY high value, to produce large highlights
        param_named exponent float 10
        
        param_named ambient   float3 0.2 0.2 0.2 
        param_named uTex      int   1
        param_named texScale  float2   3 3
    }
}

// **-- End GLSL Section --**

// **-- Begin Unified Section --**

vertex_program DepthShadowmap/ReceiverVP unified
{
    delegate DepthShadowmap/ReceiverVP_GLSL
}
fragment_program DepthShadowmap/ReceiverFP unified
{
    delegate DepthShadowmap/ReceiverFP_GLSL
}

// **-- End Unified Section --**

// Generic Shadow receiver material (floating point shadowmap)
material DepthShadowmap/Receiver/Float
{
    technique 
    {
        pass 
        {
            vertex_program_ref DepthShadowmap/ReceiverVP
            {
            }
            fragment_program_ref DepthShadowmap/ReceiverFP
            {
                param_named shadowMap int 0
            }

            // texture_unit ShadowMap
            texture_unit 0
            {
                content_type shadow
                tex_address_mode clamp
                filtering none
            }

            texture_unit 1
            {
                texture wood2.jpg
            }

        }
    }
}


// Specific receiver material for the table
material DepthShadowmap/Receiver/Table
{

    // This is the preferred technique which uses both vertex and
    // fragment programs, supports coloured lights
    technique default
    {

	// Now do the lighting pass
	// NB we don't do decal texture here because this is repeated per light
	pass lighting
	{
	    // base colours, not needed for rendering, but as information
	    // to lighting pass categorisation routine
	    ambient 0 0 0 
	    
	    // do this for each light
	    iteration once_per_light

	    
	    scene_blend add

	    // Vertex program reference
	    vertex_program_ref DepthShadowmap/ReceiverVP
	    {
	    }
	    shadow_receiver_vertex_program_ref DepthShadowmap/ReceiverVP
	    {
	    }

	    // Fragment program
	    fragment_program_ref DepthShadowmap/ReceiverFP
	    {
	    }
	    shadow_receiver_fragment_program_ref DepthShadowmap/ReceiverFP
	    {
	    }

	    // shadowmap texture (0) will be bound by code

            texture_unit 1
            {                       
                texture wood2.jpg
            }                                                   
	}
	
    }
}
